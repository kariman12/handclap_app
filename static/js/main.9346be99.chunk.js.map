{"version":3,"sources":["theme.js","conponents/current_user.js","conponents/form.js","conponents/show.js","conponents/App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","CurrentUser","props","state","Card","className","this","classes","card","CardContent","Typography","variant","color","user","Avatar","src","process","userList","current_user_id","image","alt","avatar","FormControl","formControl","onChange","event","handleCurrentUserChange","InputLabel","id","Select","labelId","value","map","i","MenuItem","String","name","clapList","getCountClapable","getCountClapped","React","Component","withStyles","appbar","alignItems","root","padding","spacing","unit","content","maxWidth","marginLeft","marginRight","textfield","margin","width","float","height","minWidth","Form","to_user_id","handleToUserChange","formArea","onSubmit","handleAdd","TextField","fullWidth","label","autoFocus","Button","submitButton","type","Show","anchorEl","popover_id","makeStyles","handlePopoverClose","setState","open","Boolean","List","post_contents","post_content","ListItem","divider","key","listItem","users","migi","postContents","ListItemText","text","date","dates","endIcon","Icon","clapMark","onClick","handleAddCount","clapCount","aria-owns","undefined","aria-haspopup","onMouseEnter","currentTarget","handlePopoverOpen","onMouseLeave","getCountPost","Popover","popover","paper","anchorReference","onClose","disableRestoreFocus","getClapDetail","textAlign","pointerEvents","display","App","clap_event","bind","inputValue","target","now","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","e","preventDefault","length","push","getNow","setjson","JSON","stringify","localStorage","setItem","user_id","current_post_id","filter","clap_user_id","post_id","from_user_id","getCountUserPostClap","filteredlist","return_list","getCountUserClap","count","sort","a","b","list","obj","getItem","parse","obj2","console","log","obj3","AppBar","position","Toolbar","Paper","clap_events","backgroundColor","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9346be99.chunk.js","sourcesContent":["import {createMuiTheme} from '@material-ui/core/styles'\n        \nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#9c786c',\n      main: '#6d4c41',\n      dark: '#40241a',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      light: '#ffa4a2',\n      main: '#e57373',\n      dark: '#af4448',\n      contrastText: '#ffffff',\n    },\n  },\n})","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Avatar from '@material-ui/core/Avatar';\n\n// css\nconst styles = (theme) => ({\n    appbar: {\n        alignItems: 'center',\n      },\n      \n    root: {\n      padding: theme.spacing.unit * 5,\n    },\n\n    content: {\n      maxWidth: 1000,\n      marginLeft  : 'auto',\n      marginRight : 'auto',\n    },\n\n    textfield: {\n          margin: theme.spacing(1),\n          width: '1000px',\n        },\n\n    card: {\n        margin: \"10px\",\n    },\n\n    user: {\n        padding: theme.spacing.unit * 5,\n        float: \"left\",\n    },\n\n    avatar: {\n        width: theme.spacing(15),\n        height: theme.spacing(15),\n      },\n\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: 120\n    },\n\n    clapList: {\n        padding: \"80px\",\n    },\n\n\n  })\n\n\nclass CurrentUser extends React.Component {    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n          \n        };\n    }\n\n    render() {\n        return(\n            <Card className={this.props.classes.card}>\n                <CardContent>\n                    <Typography variant=\"h5\" color='primary'>あなたのプロフィール</Typography>\n                    <div className={this.props.classes.user}>\n                        <Avatar\n                        src={`${process.env.PUBLIC_URL}/${this.props.userList[this.props.current_user_id].image}`}\n                        alt={this.props.userList[this.props.current_user_id].image}\n                        variant='circle'\n                        className={this.props.classes.avatar}\n                        />                    \n                        <FormControl className={this.props.classes.formControl} onChange={(event) => {this.props.handleCurrentUserChange(event)}}>\n                            <InputLabel id=\"demo-simple-select-label\">ユーザを選択</InputLabel>\n                            <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={this.props.current_user_id}\n                            onChange={(event) => {this.props.handleCurrentUserChange(event)}}\n                            >\n                            {this.props.userList.map((user, i) => {\n                                // return <option value={i}>{user.name}</option>\n                                return <MenuItem value={String(i)}>{user.name}</MenuItem>\n                            })}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className={this.props.classes.clapList}> \n                        <Typography variant=\"h6\" color='primary'>{`拍手出来るポイント : ${this.props.getCountClapable(this.props.current_user_id)}`}</Typography>\n                        <Typography variant=\"h6\" color='primary'>{`拍手されたポイント : ${this.props.getCountClapped(this.props.current_user_id)}`}</Typography>\n                    </div>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default withStyles(styles)(CurrentUser);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\n\n// css\nconst styles = (theme) => ({\n\n    textfield: {\n        width: \"500px\",\n        padding: \"10px\",\n        float: \"left\",\n        },\n\n    card: {\n        margin: \"10px\",\n    },\n\n    user: {\n        padding: theme.spacing.unit * 5,\n        float: \"left\",\n    },\n\n    avatar: {\n        width: theme.spacing(15),\n        height: theme.spacing(15),\n      },\n\n    formArea: {\n        margin: \"50px 0px\",\n        float: \"left\",\n        width: \"520px\",\n    },\n\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: \"120px\"\n    },\n\n    submitButton: {\n        margin: \"0 10px\",\n        float: \"right\",\n    }\n  })\n\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          \n        };\n    }\n\n    render() {\n        return(\n                <Card className={this.props.classes.card}>\n                    <CardContent>\n                        <Typography variant=\"h5\" color='primary'>投稿する</Typography>\n                        <div className={this.props.classes.user}>\n                            <Avatar\n                            src={`${process.env.PUBLIC_URL}/${this.props.userList[this.props.to_user_id].image}`}\n                            alt={this.props.userList[this.props.to_user_id].image}\n                            variant='circle'\n                            className={this.props.classes.avatar}\n                            />\n                            <FormControl className={this.props.classes.formControl} onChange={(event) => {this.props.handleToUserChange(event)}}>\n                                <InputLabel id=\"demo-simple-select-label\">ユーザを選択</InputLabel>\n                                <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={this.props.to_user_id}\n                                onChange={(event) => {this.props.handleToUserChange(event)}}\n                                >\n                                {this.props.userList.map((user, i) => {\n                                    return <MenuItem value={String(i)}>{user.name}</MenuItem>\n                                })}\n                                </Select>\n                            </FormControl>\n                        </div>\n                            <div className={this.props.classes.formArea}>\n                                <form onSubmit={this.props.handleAdd} >\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    id=\"text\"\n                                    label=\"賞賛メッセージを送ろう！\"\n                                    name=\"text\"\n                                    autoFocus\n                                    className={this.props.classes.textfield}\n                                />\n                                <Button className={this.props.classes.submitButton} type=\"submit\" variant=\"contained\" color=\"secondary\">投稿</Button>\n                                </form>\n                            </div>\n                    </CardContent>\n                </Card>\n        );\n    }\n}\n\nexport default withStyles(styles)(Form);","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Icon from '@material-ui/core/Icon';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Popover from '@material-ui/core/Popover';\n\n// css\nconst styles = (theme) => ({ \n\n    textfield: {\n          margin: theme.spacing(1),\n          width: '1000px',\n        },\n\n    card: {\n        margin: \"10px\",\n    },\n\n    users: {\n        padding: \"0px\",\n        float: \"left\",\n    },\n\n    user: {\n        padding: \"0px\",\n        float: \"left\",\n    },\n\n    avatar: {\n        width: theme.spacing(8),\n        height: theme.spacing(8),\n    },\n\n    migi: {\n        width: \"50px\",\n        float: \"left\",\n        padding: \"25px 10px\",\n    },\n\n    postContents: {\n        width: \"400px\",\n        margin: \"10px\",\n        padding: \"10px\",\n        float: \"left\",\n    },\n\n    dates: {\n        textAlign: \"right\",\n\n    },\n\n    popover: {\n        pointerEvents: 'none',\n      },\n\n    clapCount: {\n        margin: \"10px\",\n        padding: \"10px\",\n        display: 'inline-block',\n    },\n\n    clapMark: {\n        color: \"#fecb81\"\n    },\n\n    listItem: {\n        maxWidth: '700px'\n    },\n    \n  })\n\nclass Show extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            anchorEl: null,\n            popover_id: null,\n     \n        };\n    }\n\n    render() {\n        const classes = makeStyles();\n\n        const handlePopoverOpen = (event, i) => {\n            this.setState({\n                anchorEl: event.currentTarget,\n                popover_id: i\n            });\n        };\n\n        const handlePopoverClose = () => {\n            this.setState({\n                anchorEl: null,\n                popover_id: null\n            });\n        };\n\n        const open = Boolean(this.state.anchorEl);\n\n        return(\n            <Card className={this.props.classes.card}>\n            <CardContent>\n            <Typography variant=\"h5\" color='primary'>投稿一覧</Typography>\n            <List>\n                {this.props.post_contents.map((post_content, i) => {\n                    return (\n                            <div>\n                                <ListItem divider></ListItem>\n                                <ListItem key={i} className={this.props.classes.listItem}>\n                                    <div className={this.props.classes.users}>\n                                        <div className={this.props.classes.user}>\n                                            <Avatar src={`${process.env.PUBLIC_URL}/${this.props.userList[post_content.current_user_id].image}`} alt=\"userimage\" variant='circle' className={this.props.classes.avatar}/>\n                                            <Typography variant=\"p\" color='primary'>{this.props.userList[post_content.current_user_id].name}</Typography>\n                                        </div>\n                                        <img src={`${process.env.PUBLIC_URL}/migi.png`} className={this.props.classes.migi} alt=\"migiimage\" />\n                                        <div className={this.props.classes.user}>\n                                            <Avatar src={`${process.env.PUBLIC_URL}/${this.props.userList[post_content.to_user_id].image}`} alt=\"userimage\" variant='circle' className={this.props.classes.avatar}/>\n                                            <Typography variant=\"p\" color='primary'>{this.props.userList[post_content.to_user_id].name}</Typography>\n                                        </div>\n                                    </div>\n\n                                    <div className={this.props.classes.postContents}>\n                                        <ListItemText>\n                                            {post_content.text} \n                                        </ListItemText>\n                                        <ListItemText secondary={post_content.date} className={this.props.classes.dates}>\n                                        </ListItemText>\n\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            // className={classes.button}\n                                            endIcon={<Icon className={\"fas fa-sign-language fa-2x \" + this.props.classes.clapMark} />}  \n                                            value={i} \n                                            onClick={(event) => {this.props.handleAddCount(event, post_content.current_user_id, post_content.to_user_id)}}     \n                                        >\n                                            拍手する\n                                        </Button>\n\n                                        <div className={this.props.classes.clapCount}>\n                                            <Typography\n                                                aria-owns={open ? 'mouse-over-popover' : undefined}\n                                                aria-haspopup=\"true\"\n                                                onMouseEnter={(event) => handlePopoverOpen(event, i)}\n                                                onMouseLeave={handlePopoverClose}\n                                            >\n                                                {this.props.getCountPost(i)}\n                                            </Typography>\n                                            <Popover\n                                                id=\"mouse-over-popover\"\n                                                className={this.props.classes.popover}\n                                                classes={{\n                                                paper: classes.paper,\n                                                }}\n                                                open={open && i===this.state.popover_id}\n                                                anchorEl={this.state.anchorEl}\n                                                anchorReference={this.state.anchorEl}\n                                                onClose={handlePopoverClose}\n                                                disableRestoreFocus\n                                            >\n                                                <Typography>拍手一覧</Typography>\n                                                <Typography>{this.props.getClapDetail(i, this.props.userList)}</Typography>\n                                            </Popover>\n                                        </div>\n                                    </div>\n                                </ListItem>\n                           </div>\n                    )\n                })}\n            </List>\n            </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default withStyles(styles)(Show);","import React from 'react';\n\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from '../theme';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper'\nimport CurrentUser from './current_user';\nimport Form from './form';\nimport Show from './show';\n\n// css\nconst styles = (theme) => ({\n    appbar: {\n        alignItems: 'center',\n      },\n      \n    root: {\n      padding: theme.spacing.unit * 5,\n      backgroundColor: \"#efebe9\",\n    },\n\n    content: {\n      maxWidth: 900,\n      marginLeft  : 'auto',\n      marginRight : 'auto',\n      \n    },\n\n    textfield: {\n          margin: theme.spacing(1),\n          width: '1000px',\n        },\n  })\n\nclass App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            current_user_id: \"0\",\n            to_user_id: \"0\",\n            post_content:[],\n            clap_event:[]\n        };\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleAddCount = this.handleAddCount.bind(this);\n        this.handleCurrentUserChange = this.handleCurrentUserChange.bind(this);\n        this.handleToUserChange = this.handleToUserChange.bind(this);\n        this.getCountPost = this.getCountPost.bind(this);\n        this.getCountClapable = this.getCountClapable.bind(this);\n        this.getCountClapped = this.getCountClapped.bind(this);\n        this.getClapDetail = this.getClapDetail.bind(this);\n    }\n\n    // currentuserの変更に対応\n    handleCurrentUserChange(event) {\n        const inputValue = event.target.value;\n        this.setState({\n          current_user_id: inputValue\n        });\n    }\n\n    // メッセージを送る相手の変更に対応\n    handleToUserChange(event) {\n        const inputValue = event.target.value;\n        this.setState({\n          to_user_id: inputValue\n        });\n    }\n\n    // 現在時刻を取得\n    getNow() {\n        const now = new Date();\n        const year = now.getFullYear();\n        const mon = now.getMonth()+1;\n        const day = now.getDate();\n        const hour = now.getHours();\n        const min = now.getMinutes();\n        const sec = now.getSeconds();\n        //出力用\n        const s = year + \"/\" + mon + \"/\" + day + \" \" + hour + \":\" + min + \":\" + sec ; \n        return s;\n    }\n    \n    // 投稿されたメッセージを保存\n    handleAdd(e) {\n        // リダイレクト防止\n        e.preventDefault();\n        if ((e.target.text.value.length) > 4) {\n            // フォームから受け取ったデータと現在時刻をオブジェクトに挿入して、stateのposts配列に追加\n            this.state.post_content.push({text: e.target.text.value, date: this.getNow(), current_user_id: this.state.current_user_id, to_user_id: this.state.to_user_id}); // まだ保存されていない\n            // setStateを使ってstateを上書き\n            this.setState({post_content: this.state.post_content});\n            // inputのvalueを空に\n            e.target.text.value = '';\n            //localstrageにwrite\n            var setjson = JSON.stringify(this.state.post_content);\n            localStorage.setItem('post_content', setjson);\n\n        }\n    }\n\n    // あるユーザのある投稿に対する拍手数をカウント\n    getCountUserPostClap(user_id, current_post_id) {\n        const filteredCounts = this.state.clap_event.filter((clap_event) => \n        {\n            return (clap_event.clap_user_id === String(user_id) && clap_event.post_id === String(current_post_id))\n        });\n\n        return filteredCounts.length;\n    }\n\n    // 拍手された情報を保存\n    handleAddCount(event, from_user_id, to_user_id) {\n        if (!(this.state.current_user_id === from_user_id || this.state.current_user_id === to_user_id) &&\n            (this.getCountUserPostClap(this.state.current_user_id, event.currentTarget.value) < 15)) {\n            // リダイレクト防止\n            event.preventDefault();\n            // ボタンを押された時のcurrent_user_idと投稿のpost_idとfrom_user_idとto_user_idをオブジェクトに挿入して、stateのclap_event配列に追加\n            this.state.clap_event.push({clap_user_id: this.state.current_user_id, post_id: event.currentTarget.value, from_user_id: from_user_id, to_user_id}); // まだ保存されていない\n            // setStateを使ってstateを上書き\n            this.setState({clap_event: this.state.clap_event});\n            //localstrageにwrite\n            var setjson = JSON.stringify(this.state.clap_event);\n            localStorage.setItem('clap_event', setjson);\n        }\n    }\n\n    // ある投稿への拍手数をカウント\n    getCountPost(current_post_id) {\n        const filteredCounts = this.state.clap_event.filter((clap_event) => \n        {\n            return clap_event.post_id === String(current_post_id)\n        });\n        return filteredCounts.length;\n    }\n\n    //　currentuserの拍手できる数をカウント\n    getCountClapable(current_user_id) {\n        // 100-拍手した数*2+拍手された数\n        const filteredCounts = this.state.clap_event.filter((clap_event) => \n        {\n            return clap_event.clap_user_id === String(current_user_id)\n        });\n        return (100 - filteredCounts.length * 2 + this.getCountClapped(current_user_id));\n    }\n\n    // currentuserの拍手された数をカウント\n    getCountClapped(current_user_id) {\n        const filteredCounts = this.state.clap_event.filter((clap_event) => \n        {\n            return (clap_event.from_user_id === String(current_user_id) || clap_event.to_user_id === String(current_user_id))\n        });\n        return filteredCounts.length;\n    }\n\n    // あるユーザがある与えられた投稿群(投稿)について拍手した回数をカウント\n    getCountUserClap(user_id, filteredlist) {     \n        const filteredCounts = filteredlist.filter((clap_event) => \n        {\n            return (clap_event.clap_user_id === String(user_id))\n        });\n        return filteredCounts.length;\n    }\n\n    // ある投稿に対するユーザごとの拍手数をカウント\n    getClapDetail(current_post_id, userList) {\n        // 投稿のidを持つclapdataを取ってくる\n        const filteredlist = this.state.clap_event.filter((clap_event) => \n        {\n            return clap_event.post_id === String(current_post_id)\n        });\n\n        // ユーザごとに並び替えするための新たな配列を定義\n        const return_list = [];\n\n        // 配列にnameとcountを追加\n        for (let i=0; i<userList.length; i++) {\n            if (this.getCountUserClap(i, filteredlist) > 0) {\n                return_list.push({name: userList[i].name, count: this.getCountUserClap(i, filteredlist)});\n            }\n        }\n\n        // count順に並び替え\n        return_list.sort(function(a, b) {\n            if (a.count < b.count) {\n              return 1;\n            } else {\n              return -1;\n            }\n          })\n\n        // 並び替えた結果を出力\n        const list = return_list.map((user) => \n        {\n            return (\n                <li>\n                    {user.name} : {user.count}\n                </li>\n            );\n        });\n        return <ul>{list}</ul>;\n    }\n\n\n    render() {\n\n        let userList = [\n            {name: \"ぱんだ\", image: \"panda.jpg\"},\n            {name: \"ねこ\" , image: \"neko.jpg\"},\n            {name: \"はりねずみ\", image: \"harinezumi.jpg\"},\n            {name: \"いぬ\", image: \"inu.jpg\"},\n            {name: \"りす\", image: \"risu.jpg\"}\n        ];\n\n        // userListをlocalstrageにwrite,read\n        // localstrageにwrite\n        var setjson = JSON.stringify(userList);\n        localStorage.setItem('userList', setjson);\n        // localstrageからread\n        var obj = localStorage.getItem('userList');\n        userList = JSON.parse(obj);\n        // console.log(userList);\n\n        // post_contentをlocalstrageにwrite,read\n        // localstrageからread\n        var obj2 = localStorage.getItem('post_content');\n        if (obj2 != null) {\n            this.state.post_content = JSON.parse(obj2);\n        }\n        console.log(this.state.post_content);\n\n        // clap_eventをlocalstrageにwrite,read\n        // localstrageからread\n        var obj3 = localStorage.getItem('clap_event');\n        if (obj3 != null) {\n            this.state.clap_event = JSON.parse(obj3);\n        }\n        console.log(this.state.clap_event);\n\n\n\n        return (\n                <div>\n                    <MuiThemeProvider theme={theme}>\n                        <AppBar position=\"static\" color='primary' className={this.props.classes.appbar}>\n                            <Toolbar >\n                                <Typography variant=\"h4\" color=\"inherit\" >\n                                Handclap App\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <Paper>\n                            <div className={this.props.classes.root}>  \n                                <div className={this.props.classes.content}>\n                                    <CurrentUser\n                                    current_user_id={this.state.current_user_id}\n                                    userList={userList}\n                                    handleCurrentUserChange={this.handleCurrentUserChange}\n                                    getCountClapable={this.getCountClapable}\n                                    getCountClapped={this.getCountClapped}\n                                    />\n\n                                    <Form\n                                    to_user_id={this.state.to_user_id}\n                                    userList={userList}\n                                    handleToUserChange={this.handleToUserChange}\n                                    handleAdd={this.handleAdd}\n                                    />\n\n                                    <Show\n                                    post_contents={this.state.post_content}\n                                    userList={userList}\n                                    clap_events={this.state.clap_event}\n                                    handleAddCount={this.handleAddCount}\n                                    getCountPost={this.getCountPost}\n                                    getClapDetail={this.getClapDetail}\n                                    />\n                                </div>\n                            </div>\n                        </Paper> \n                    </MuiThemeProvider>\n                </div>\n        );\n        }\n}\n\n// export default App;\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './conponents/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}